{"ast":null,"code":"import './App.css';\nimport { useState, useEffect } from \"react\";\nimport Axios from 'axios';\nimport { BrowserRouter as Router, Routes, Route, BrowserRouter } from 'react-router-dom';\nimport AddWorkout from './pages/AddWorkout';\n{/* \n function App() {\n  const [exercise, setExercise] = useState(\"\");\n  const [sets, setSets] = useState(0);\n  const [reps, setReps] = useState(\"\");\n  const [weight, setWeight] = useState(\"\");\n  const [exerciseList, setExerciseList] = useState([]);\n  const [showExercises, setShowExercises] = useState(false); // State to track visibility of exercises\n  const [tableName, setTableName] = useState(\"\"); \n \n  useEffect(() => {\n    if (showExercises) { // Fetch exercises only if showExercises is true\n      getExercises();\n    }\n  }, [showExercises]); // Fetch exercises when showExercises state changes\n   const getExercises = () => {\n    Axios.get('http://localhost:3001/exercises')\n      .then((response) => setExerciseList(response.data))\n      .catch(error => console.error('Error fetching exercises:', error));\n  };\n   const deleteExercise = (id) => {\n    Axios.delete(`http://localhost:3001/exercise/${id}`)\n      .then(() => {\n        // Remove the deleted exercise from the exerciseList state\n        setExerciseList(exerciseList.filter(exercise => exercise.id !== id));\n      })\n      .catch(error => console.error('Error deleting exercise:', error));\n  };\n   const addFullExercise = () => {\n    Axios.post('http://localhost:3001/create', {\n      exercise: exercise,\n      sets: sets,\n      reps: reps,\n      weight: weight\n    }).then(() => {\n      // Update the exerciseList state with the new exercise object\n      setExerciseList([...exerciseList, {\n        exercise: exercise,\n        sets: sets,\n        reps: reps,\n        weight: weight\n      }]);\n      // Clear input fields after adding exercise\n      setExercise(\"\");\n      setSets(0);\n      setReps(\"\");\n      setWeight(\"\");\n    }).catch(error => {\n      console.error('Error adding exercise:', error);\n    });\n  };\n   const newTable = () =>{\n    Axios.post('http://localhost:3001/createTable', {\n      tableName: tableName,\n    }).then(() => {\n      setTableName('')\n    }).catch(error => {\n      console.error('Error adding exercise:', error);\n    });\n    \n  };\n \n   return (\n    <div className=\"App\">\n      <div className=\"information\">\n        <label>Add Workout</label>\n        <input type=\"text\" value={tableName} onChange={(event) => setTableName(event.target.value)}/>\n        <button onClick={newTable}>\n          AddExercise\n        </button>\n        <label>Exercise:</label>\n        <input type=\"text\" value={exercise} onChange={(event) => setExercise(event.target.value)} />\n        <label>No. of Sets:</label>\n        <input type=\"number\" value={sets} onChange={(event) => setSets(event.target.value)} />\n        <label>Rep Break Down:</label>\n        <input type=\"text\" value={reps} onChange={(event) => setReps(event.target.value)} />\n        <label>Weight Breakdown</label>\n        <input type=\"text\" value={weight} onChange={(event) => setWeight(event.target.value)} />\n        <button onClick={addFullExercise}>Add Exercise</button>\n      </div>\n       <div className=\"exercises\">\n        <button onClick={() => setShowExercises(!showExercises)}>\n          {showExercises ? 'Hide Exercises' : 'Show Exercises'}\n        </button>\n        {showExercises && ( // Render exercise table only if showExercises is true\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Sets</th>\n                <th>Reps</th>\n                <th>Weight</th>\n                <th>Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              {exerciseList.map(exercise => (\n                <tr key={exercise.id}>\n                  <td>{exercise.name}</td>\n                  <td>{exercise.sets}</td>\n                  <td>{exercise.reps}</td>\n                  <td>{exercise.weight}</td>\n                  <td>\n                    <button onClick={() => deleteExercise(exercise.id)}>Delete</button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n    </div>\n  );\n }\n export default App;\n */}\n{/*  function App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      <Routes>\n          <Route path = \"/\" element = {<AddWorkout/>}/>\n        </Routes>\n      </BrowserRouter>\n        \n     </div>\n  );\n }\n export default App;*/}","map":{"version":3,"names":["useState","useEffect","Axios","BrowserRouter","Router","Routes","Route","AddWorkout"],"sources":["C:/Users/ameen/Documents/First Full Stack project/client/src/App.js"],"sourcesContent":["import './App.css';\nimport { useState, useEffect } from \"react\"; \nimport Axios from 'axios';\nimport {BrowserRouter as Router, Routes, Route, BrowserRouter} from 'react-router-dom'\nimport AddWorkout from './pages/AddWorkout';\n\n\n\n{/* \nfunction App() {\n  const [exercise, setExercise] = useState(\"\");\n  const [sets, setSets] = useState(0);\n  const [reps, setReps] = useState(\"\");\n  const [weight, setWeight] = useState(\"\");\n  const [exerciseList, setExerciseList] = useState([]);\n  const [showExercises, setShowExercises] = useState(false); // State to track visibility of exercises\n  const [tableName, setTableName] = useState(\"\"); \n\n\n  useEffect(() => {\n    if (showExercises) { // Fetch exercises only if showExercises is true\n      getExercises();\n    }\n  }, [showExercises]); // Fetch exercises when showExercises state changes\n\n  const getExercises = () => {\n    Axios.get('http://localhost:3001/exercises')\n      .then((response) => setExerciseList(response.data))\n      .catch(error => console.error('Error fetching exercises:', error));\n  };\n\n  const deleteExercise = (id) => {\n    Axios.delete(`http://localhost:3001/exercise/${id}`)\n      .then(() => {\n        // Remove the deleted exercise from the exerciseList state\n        setExerciseList(exerciseList.filter(exercise => exercise.id !== id));\n      })\n      .catch(error => console.error('Error deleting exercise:', error));\n  };\n\n  const addFullExercise = () => {\n    Axios.post('http://localhost:3001/create', {\n      exercise: exercise,\n      sets: sets,\n      reps: reps,\n      weight: weight\n    }).then(() => {\n      // Update the exerciseList state with the new exercise object\n      setExerciseList([...exerciseList, {\n        exercise: exercise,\n        sets: sets,\n        reps: reps,\n        weight: weight\n      }]);\n      // Clear input fields after adding exercise\n      setExercise(\"\");\n      setSets(0);\n      setReps(\"\");\n      setWeight(\"\");\n    }).catch(error => {\n      console.error('Error adding exercise:', error);\n    });\n  };\n\n  const newTable = () =>{\n    Axios.post('http://localhost:3001/createTable', {\n      tableName: tableName,\n    }).then(() => {\n      setTableName('')\n    }).catch(error => {\n      console.error('Error adding exercise:', error);\n    });\n    \n  };\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"information\">\n        <label>Add Workout</label>\n        <input type=\"text\" value={tableName} onChange={(event) => setTableName(event.target.value)}/>\n        <button onClick={newTable}>\n          AddExercise\n        </button>\n        <label>Exercise:</label>\n        <input type=\"text\" value={exercise} onChange={(event) => setExercise(event.target.value)} />\n        <label>No. of Sets:</label>\n        <input type=\"number\" value={sets} onChange={(event) => setSets(event.target.value)} />\n        <label>Rep Break Down:</label>\n        <input type=\"text\" value={reps} onChange={(event) => setReps(event.target.value)} />\n        <label>Weight Breakdown</label>\n        <input type=\"text\" value={weight} onChange={(event) => setWeight(event.target.value)} />\n        <button onClick={addFullExercise}>Add Exercise</button>\n      </div>\n\n      <div className=\"exercises\">\n        <button onClick={() => setShowExercises(!showExercises)}>\n          {showExercises ? 'Hide Exercises' : 'Show Exercises'}\n        </button>\n        {showExercises && ( // Render exercise table only if showExercises is true\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Sets</th>\n                <th>Reps</th>\n                <th>Weight</th>\n                <th>Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              {exerciseList.map(exercise => (\n                <tr key={exercise.id}>\n                  <td>{exercise.name}</td>\n                  <td>{exercise.sets}</td>\n                  <td>{exercise.reps}</td>\n                  <td>{exercise.weight}</td>\n                  <td>\n                    <button onClick={() => deleteExercise(exercise.id)}>Delete</button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n*/}\n\n\n\n{/*  function App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      <Routes>\n          <Route path = \"/\" element = {<AddWorkout/>}/>\n        </Routes>\n      </BrowserRouter>\n        \n\n    </div>\n  );\n}\n\nexport default App;*/}\n\n"],"mappings":"AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAAQC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEH,aAAa,QAAO,kBAAkB;AACtF,OAAOI,UAAU,MAAM,oBAAonHC;AAgID,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAZC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}